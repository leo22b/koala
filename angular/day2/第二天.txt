    过滤器用来格式化需要展示给用户的数据，angularjs提供了很多使用的内置过滤器，同时也提供了方便的途径可以自己创建过滤器在html中的模板绑定符{{}}内通过|符号调用过滤器。
    例如：假设我们希望字符串转换为大写，可以对字符串中的每个字符都单独进行转换操作，也可以使用过滤器：{{name|uppercase}}

    在js代码中可以通过$filter来调用过滤器，例如，在js代码中使用lowercase过滤器：

            app.module('mycontroller',['$scope','$filter',function($scope,$filter){
                    $scope.name=$filter('lowercase')('Ari');

            }])
    以html的形式使用过滤器时，如果需要传递参数给过滤器，只要在过滤器名字后面加冒号即可，如果有多个参数，可以在每个参数后面都加入冒号，例如，数值过滤器可以限制小数点后的位数，在过滤器后写上:2可以将2作为参数传给过滤器:
            {{123.456789|number:2}}//123.46
         
         下面来介绍angular提供的内置过滤器  (1.html)
          1：currency  数值格式化为货币格式
          2：date      将日期格式格式化为需要的格式
          3: uppercase，lowercase 大小写转换
          4: number    格式化（保留小数）     
          5: limitTo   截取
          6: json      将对象或json以字符串的形式输出
          7: orderBy   排序
          8: filter    从数组中选择一个子集 (和原生js中的数组filter(callback))方法差不多
                       fliter过滤器有两个参数
                       第一个参数有三种不同类型

                           1：字符串  表示返回包含该字符串的元素
                           2：对象    angul会将待过滤对象 的属性同过滤器中对象的属性比较，如果属性值是字符串就会判断是否包含该字符串
                           3：函数    返回匹配结果元素


          9:自定义过滤器  自定义过滤器其实就是一个函数，它以需要过滤的数据做为他的参数

            例如： angular.module("myapp",[]).filter("iscapital",function(){
                    return function(str){
                            return str[0].toUpperCase()+str.slice(1)

                    }
            })



        10:实例  使用过滤器实现条件查询  （2.html）
                 实现查看商品详情        （3.html）（4.html）


----------------------------------------------------------------------------------------------------------------------------------
  
        11:angularjs 表单验证  (5.html)

       
angularJS中的表单验证（包括自定义验证）

表单验证是angularJS一项重要的功能，能保证我们的web应用不会被恶意或错误的输入破坏。Angular表单验证提供了很多表单验证指令，并且能将

html5表单验证功能同他自己的验证指令结合起来使用，进而在客户端验证时提供表单状态的实时反馈。

要使用表单验证，首先保证表单有一个name属性，一般的输入字段如最大，最小长度等，这些功能由html5表单属性提供，如果我们想屏蔽浏览器对表单

的默认验证行为，可以在表单元素上添加novalidate标记。

表单基本格式如下：

<form name="form" novalidate>
                  <label for="email">你的邮箱：</label>
                  <input type="email" name="email" id="email" ng-model="user.email" placeholder="邮箱地址">
                  <span style="color:red" ng-show="myForm.user.$dirty && myForm.user.$invalid">
                     <span ng-show="myForm.user.$error.required">用户名是必须的。</span>
                    <span ng-show="myForm.user.$error.pattern">只能由字母,数字,下划线组成</span>
                  </span>
</form>

当然在input元素上还可以使用很多验证选项，比如：
1.必填项，设置某个表单输入是否已经填写，只需要在输入字段元素上添加require标记即可。

<input type="text" required>

2.最小（大）长度，验证表单输入的文本长度是否大于某个最小值，可以使用ng-minlength指令（ng-maxlength指令）

<input type="text" ng-minlength="5" ng-maxlength>

3.模式匹配，使用ng-pattern来确保输入匹配指定的正则表达式

<input type="text"  ng-pattern="/^[a-zA-Z]$/">

4. 电子邮件，只需要把input的类型设置为email即可

<input type="email" name="email" ng-model="user.email" >

5.数字，只需要将input的类型设置为number

<input type="number" name="age" ng-model="user.age">

6.URL，将input的类型设置为url
 

由于表单的属性可以在其$scope对象中访问到，而我们又可以直接访问到$scope，因此js可以间接的访问DOM的表单属性，借助这些属性，我们可以对表单做出实时响应。

这些属性有：

1. 未修改的表单，用来判断用户是否修改了表单，如果修改了则为true，未修改则为false。

formName.inputFieldName.$pristine

2. 修改过的表单，只要用户修改过表单，无论输入是否通过验证，该值都将返回true

    formName.inputFieldName.$dirty

3. 合法的表单，这个属性是用来判断表单的内容是否合法的，如果合法则该属性的值为true

formName.inputFieldName.$valid

4. 不合法的表单，这个属性与上个属性正好相反，如果不合法，则该属性值为true

formName.inputFieldName.$invalid

5. 错误，$error对象包含了当前表单的所有验证内容，以及它们是否合法的信息，如果验证失败，该属性值为true，如果验证成功，则该值为false

formName.inputFieldName.$error



同时，ng针对这几种验证指令，针对性的设置了一些css样式，称为状态类

它们包括：

  
.ng-valid  { }
.ng-invalid { }
.ng-pristine { }
.ng-dirty  { }





-------------------------------------------------------------------------------------------------------------------------------------
         12:angularjs的一些常用内置指令

                                
                     ng-app 	        定义应用程序的根元素。 (6.html)
                     ng-controller 	定义应用的控制器对象
                     ng-cloak         	在应用正要加载时防止其闪烁
                     ng-bind 	        绑定 HTML 元素到应用程序数据 作用和双大号{{}}绑定语法一样
                     ng-bind-html 	绑定 HTML 元素的 innerHTML 到应用程序数据，并移除 HTML 字符串中危险字符
                     ng-bind-template 	规定要使用模板替换的文本内容     
            
                     ng-class 	        指定 HTML 元素使用的 CSS 类      (7.html)                             
                     ng-class-even 	类似 ng-class，但只在偶数行起作用 (8.html)
                     ng-class-odd 	类似 ng-class，但只在奇数行起作用 
                     ng-style           指定元素的 style 属性 (10.html)

                     ng-repeat          定义集合中每项数据的模板  (9.html)
                     ng-options         指令来创建一个下拉列表，列表项通过对象和数组循环输出 (12.html)

                     ng-show            显示或隐藏 HTML 元素 (11.html)
                     ng-if              如果条件为 false 移除 HTML 元素
                     
                     ng-src | ng-srcset 指定 <img> 元素的 src 属性  (13.html)
                     ng-href            为 <a> 元素指定链接

                     ng-checked         指令用于设置复选框(checkbox)或单选按钮(radio)的 checked 属性。(14.html) 
                     ng-selected 	指定元素的 selected 属性
                     ng-disabled 	规定一个元素是否被禁用
                     ng-readonly 	指定元素的 readonly 属性
                     ng-value        	规定 input 元素的值 

                     ng-switch 	        规定显示或隐藏子元素的条件 (15.html)
                     ng-non-bindable 	规定元素或子元素不使用angular语法 (16.html)
                     
               

                  AngularJS 支持以下事件:

                     ng-click   （17.html）
                     ng-dbl-click
                     ng-mousedown
                     ng-mouseenter
                     ng-mouseleave
                     ng-mousemove
                     ng-keydown
                     ng-keyup
                     ng-keypress
                     ng-change
-------------------------------------------------------------------------------------------------------------------------------
                  
尽管Angular不鼓励依赖jQuery库，但是在应用中仍然可以使用它。只需确保在 DOMContentLoaded事件被触发之前载入它或者手动启动应用即可。 
Angular本身包含了一个叫做jqLite的可兼容性库。 使用过的angular.element()方法就返回一个jqLite对象，
 jqLite是jQuery库的子集，它 允许Angular以跨浏览器兼容的方式维护DOM。 jqLite并不试图覆盖jQuery库包含的所有方法，它旨在保持轻量，
并且只覆盖了Angular要用 到的那些方法。 
                    这个库包含以下jQuery方法。 
                    addClass() 给元素添加指定的类。 
                    after() 在元素的后面插入内容。 
                    append() 将内容插入到元素的尾部。 
                    attr() 获取或者设置元素的属性①值。 
                    bind()/on() 给选中元素的一个或者多个事件附加一个事件处理程序。 
                    children() 获取元素的子元素。 
                    clone() 创建一个元素的深复制。 
                    contents() 获取每个元素的子节点，返回的集合中包含文本和注释节点。 
                    css() 获取或设置元素的style属性值。 
                    data() 存储或返回与元素关联的指定数据值。 
                    eq() 获取指定索引位置的元素。 
                    find() 过滤元素的子节点，只能通过标签名过滤。 
                    hasClass() 确定元素本身是否分配了给定的类。 
                    html() 获取或者设置元素的HTML内容。 
                    next() 获取紧跟元素的兄弟元素。 
                    off()/unbind() 通过名称移除一个事件处理程序。 
                    parent() 获取元素的父元素。 
                    prepend() 将内容插入到元素的开头。 
                    prop() 获取或设置元素的属性①值。 
                    ready() 指定一个DOM加载完成时执行的函数。 
                    remove() 从DOM中移除元素。 
                    removeAttr() 从元素中移除一个属性（attribute）。 
                    removeClass() 从元素中移除一个、多个或者所有类。 
                    removeData() 从元素中移除先前存储的数据。 
                    repalceWith() 使用提供的新内容替换元素。 
                    text() 获取或者设置元素中合并的文本内容。 
                    toggleClass() 从元素中添加或者移除一个或者多个类。 
                    triggerHandler() 执行附加给元素的某个事件的所有事件处理程序。 
                    val() 获取或设置元素的当前值。 
                    wrap() 使用指定的HTML结构包裹元素。 
 
 
 
用法angular.element()
  比如: var tat=angular.element(document.getElementById("XXX"));
                    tat.removeAttr("readonly");//移除掉readonly这个属性
 


                    











       

